# This template deploy a Flask app to be a Azure WebApp target with zip deploy.
# This template fetch variables and parameters from azure-pipeline.yml

parameters:
  environment: 'xxx'
  appName: 'xxx'
  azureConnectionName: 'xxx'

jobs:

  - deployment: DeploymentJob
    displayName: Deploy artifact to Azure ${{ parameters.environment }}

    pool:
      vmImage: $(vmImageName)
    environment: ${{ parameters.environment  }}

    # Variables to determin if this is production,
    # then deploy to 'slot'
    variables:
      target: ${{ parameters.environment }}
      isProd: $[ contains(variables.target, 'prod') ]
      DEPLOY_DATE:  $(system.pipelineStartTime)

      ${{ if contains(variables.target, 'prod') }}:
        slot: 'deployment-slot'
        url: https://${{ parameters.appName }}-deployment-slot.azurewebsites.net/api/v1/status/
      ${{ if not(contains(variables.target, 'prod')) }}:
        slot: 'production'
        url: https://${{ parameters.appName }}.azurewebsites.net/api/v1/status/

      # Renaming variables, Dev.Azure.Library is not updated yet
      DB_DEFAULT_USER: $[ variables._db_user ]
      DB_DEFAULT_PASSWORD: $[ variables._db_pwd ]
      DB_DEFAULT_SERVER: $[ variables._db_server ]
      DB_DEFAULT_SCHEMA: $[ variables._db_schema ]

      DB_BIND_DATA_USER: $[ variables._db_data_user ]
      DB_BIND_DATA_PASSWORD: $[ variables._db_data_pwd ]
      DB_BIND_DATA_SERVER: $[ variables._db_data_server ]
      DB_BIND_DATA_SCHEMA: $[ variables._db_data_schema ]

    strategy:
      runOnce:
        deploy:
          steps:

          # We don't wanna checkout the source code, but used the Build
          # from the previous step.
          # We will explicit checkout the DevOps repo later.
          # - checkout: none

          - bash: |
              echo "-----------------------------------------"
              echo "Is prod?: $(isProd)"
              echo "Slot: $(slot)"
              echo "BuildId: $(Build.BuildId)"
              echo "Build.SourceVersion: $(Build.SourceVersion)"
              echo "Repo name: $(Build.Repository.Name)"
              echo "Branch: $(Build.SourceBranch)"
              echo "-----------------------------------------"
            displayName: 'display vars'

          # - task: DownloadPipelineArtifact@2
          - download: current
            displayName: 'Download artifact'
            artifact: drop

          # Configuration transformation (usernames/passwords)
          # Look at alternative extension called Magic Chunks & replacetokens@3
          #v2: ##[error]Error: Cannot perform XML transformations on a non-Windows platform.
          - task: FileTransform@1
            displayName: 'Configuration substitution'
            inputs:
              folderPath: $(Pipeline.Workspace)/drop/build$(Build.BuildId).zip
              fileType: 'json'
              targetFiles: |
                **/config_*.json

          - task: AzureWebApp@1
            displayName: "Deploy package to Azure WebApp: ${{ parameters.appName }}"
            inputs:
              azureSubscription: '${{ parameters.azureConnectionName }}'
              appName: '${{ parameters.appName }}'
              package: $(Pipeline.Workspace)/drop/build$(Build.BuildId).zip
              deployToSlotOrASE: $(isProd)
              slotName: $(slot)

          - checkout: templates

          # Checking API accessible
          - task: Bash@3
            displayName: 'Checking API status available'
            inputs:
              targetType: filePath
              filePath: Templates/Flask_WebApp/test_response.sh
              arguments: $(url)
            displayName: 'Checking API status available'

          # Swap to a production slot
          - task: AzureAppServiceManage@0
            displayName: 'Swap Deployment Slot to Production'
            condition: eq(variables.isProd, 'true')
            inputs:
              azureSubscription: '${{ parameters.azureConnectionName }}'
              appType: webAppLinux
              WebAppName: '${{ parameters.appName }}'
              ResourceGroupName: $(RESOURCE_GROUP_NAME)
              SourceSlot: $(slot)
              SwapWithProduction: true
