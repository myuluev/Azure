# This template test a Flaks app to be deployed to a Azure WebApp with zip deploy.
# This template fetch variables from azure-pipeline.yml

jobs:

  - job: TestJob
    displayName: Test with pytest

    pool:
      vmImage: $(vmImageName)

    # Renaming variables, project in Dev.Azure.Library is not updated yet
    variables:
      DB_DEFAULT_USER: $[ variables._db_user ]
      DB_DEFAULT_PASSWORD: $[ variables._db_pwd ]
      DB_DEFAULT_SERVER: $[ variables._db_server ]
      DB_DEFAULT_SCHEMA: $[ variables._db_schema ]

      DB_BIND_DATA_USER: $[ variables._db_data_user ]
      DB_BIND_DATA_PASSWORD: $[ variables._db_data_pwd ]
      DB_BIND_DATA_SERVER: $[ variables._db_data_server ]
      DB_BIND_DATA_SCHEMA: $[ variables._db_data_schema ]


    steps:

      # Set python version
      - task: UsePythonVersion@0
        inputs:
          versionSpec: $(pythonVersion)

      # Configuration transformation (usernames/passwords)
      - task: FileTransform@1
        inputs:
          # folderPath: $(Pipeline.Workspace)/drop/build$(Build.BuildId).zip
          folderPath: $(System.DefaultWorkingDirectory)/configuration/
          fileType: 'json'
          targetFiles:
            '**/config_*.json'
        displayName: 'Configuration substitution'

      - script: |
          python -m pip install --upgrade pip setuptools wheel
          find . -name "requirements*" -type f -exec pip install -r '{}' ';'
        displayName: 'Install dependencies'

      - script: |
          export PROMETHEUS_MULTIPROC_DIR=/tmp
          # export FLASK_ENV=production
          export TESTING=True
          # pip install pytest pytest-cases
          python -m pytest tests --junitxml=junit/test-results.xml
        displayName: 'Run tests with pytest'
        continueOnError: false

      # Publish test results to Azure pipelines
      - task: PublishTestResults@2
        inputs:
          testResultsFiles: '**/test-*.xml'
          testRunTitle: 'Publish test results for Python $(pythonVersion)'
          failTaskOnFailedTests: true
        condition: succeededOrFailed()
