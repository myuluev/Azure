# This template deploy a Flask app to be a Azure WebApp target with zip deploy.
# This template fetch variables and parameters from azure-pipeline.yml

parameters:
  environment: 'xxx'
  appName: 'xxx'
  azureConnectionName: 'xxx'

jobs:

  - deployment: DeploymentJob
    displayName: Deploy artifact to Azure ${{ parameters.environment }}
    pool:
      vmImage: $(vmImageName)
    environment: ${{ parameters.environment  }}

    # Variables to determin if this is production,
    # then deploy to 'slot'
    variables:
      target: ${{ parameters.environment }}
      isProd: $[ contains(variables.target, 'prod') ]
      RELEASE_ID: $(Build.BuildId)
      RELEASE_NUMBER: $(Build.BuildNumber)
      BUILD_SOURCE_VERSION: $(Build.SourceVersion)

      ${{ if contains(variables.target, 'prod') }}:
        slot: 'deployment-slot'
      ${{ if not(contains(variables.target, 'prod')) }}:
        slot: 'production'

    strategy:
      runOnce:
        deploy:
          steps:

          - bash: |
              echo
              echo "target: $(var1)"
              echo "prod: $(isProd)"
              echo "slot: $(slot)"
              echo "config_file: $(config_file)"
              echo "BuildId: $(Build.BuildId)"
              echo "Build_source_version: $(BUILD_SOURCE_VERSION)"
              echo "Build.SourceVersion: $(Build.SourceVersion)"
              echo ":Repo name: $(Build.Repository.Name)"
              echo "Branch: $(Build.SourceBranch)"
              echo "Resource Group Name: $(RESOURCE_GROUP_NAME)"
              echo "app name: ${{ parameters.appName }}"
              echo "Source slot: ${{ parameters.appName }}-deployment-slot"
            displayName: 'display vars'

          - powershell: |
              Write-Host "Setting up the date time for build variable"
              $date=$(Get-Date -format "dddd dd/MM/yyyy HH:mm")
              Write-Host "##vso[task.setvariable variable=RELEASE_DATE]$date"
              Write-Host "##vso[task.setvariable variable=DEPLOYMENT_DATE]$date"
            displayName: 'PowerShell Script'
          
          # - task: DownloadPipelineArtifact@2
          - download: current
            artifact: drop
            displayName: 'Download artifact'

          # Configuration transformation (usernames/passwords)
          - task: FileTransform@1
            inputs:
              folderPath: $(Pipeline.Workspace)/drop/build$(Build.BuildId).zip
              fileType: 'json'
              targetFiles: 
                '**/config_production.json'
            displayName: 'Configuration substitution'


          - task: AzureWebApp@1
            inputs:
              azureSubscription: '${{ parameters.azureConnectionName }}'
              appName: '${{ parameters.appName }}'
              package: $(Pipeline.Workspace)/drop/build$(Build.BuildId).zip
              deployToSlotOrASE: $(isProd)
              slotName: $(slot)  # 'deployment-slot'
            displayName: "Release package to Azure WebApp: ${{ parameters.appName }}"

          # Checking API accessible
          - task: Bash@3
            displayName: 'Checking API status available'
            inputs:
              targetType: filePath
              filePath: Templates/Flask_WebApp/test_response.sh
              arguments: $(url)
            displayName: 'Checking API status available'

          # Swap to a production slot
          - task: AzureAppServiceManage@0
            inputs:
              azureSubscription: '${{ parameters.azureConnectionName }}'
              appType: webAppLinux
              WebAppName: '${{ parameters.appName }}'
              ResourceGroupName: $(RESOURCE_GROUP_NAME)
              SourceSlot: $(slot)
              SwapWithProduction: true
            displayName: 'Swap Deployment Slot to Production'